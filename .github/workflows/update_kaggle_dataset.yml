name: Update Kaggle Dataset

on:
  push:
    branches:
      - master
      - feature/add-groq-llm-model
    paths-ignore:
      - 'chat-langchain/**'
  pull_request:
    branches:
      - master
      - feature/add-groq-llm-model
    paths-ignore:
      - 'chat-langchain/**'

jobs:
  update-dataset:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: |
          python -m pip install poetry==1.8.3
        shell: pwsh

      - name: Configure Poetry
        run: |
          python -m poetry config virtualenvs.in-project true
        shell: pwsh

      - name: Cache the virtualenv
        uses: actions/cache@v3
        with:
          path: ./.venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}

      - name: Update lock file
        run: poetry lock --no-update
        shell: pwsh

      - name: Install dependencies
        run: |
          python -m poetry install
        shell: pwsh

      - name: Install Kaggle API
        run: python -m poetry run pip install kaggle
        shell: pwsh

      - name: Configure Kaggle API credentials
        run: |
          mkdir -p ~/.kaggle
          echo '{"username":"${{ secrets.KAGGLE_USERNAME }}","key":"${{ secrets.KAGGLE_KEY }}"}' > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json
        shell: pwsh

      - name: Create dataset metadata
        run: |
          echo '{
            "title": "chat-langchain forked github repository",
            "id": "rogermt/chat-langchain-repo",
            "licenses": [
              {
                "name": "CC0-1.0"
              }
            ]
          }' > dataset-metadata.json
        shell: pwsh

      - name: Zip the dataset
        run: |
          if (Test-Path ../chat-langchain-repo.zip) { Remove-Item ../chat-langchain-repo.zip }
          $filesToZip = Get-ChildItem -Recurse -File | Where-Object { $_.FullName -notmatch "\.env$" }
          Compress-Archive -Path $filesToZip.FullName -DestinationPath ../chat-langchain-repo.zip -Force
        shell: pwsh

      - name: Check if dataset exists and create if not
        run: python -m poetry run kaggle datasets create -p . || echo "Dataset already exists, continuing to update."
        shell: pwsh

      - name: Update Kaggle Dataset
        run: python -m poetry run kaggle datasets version -p . --dir-mode zip -m "Updated dataset with new changes"
        shell: pwsh